#include <iostream>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <list>

void display (const std::vector<int> &vec) {
	std::cout << "[ ";
	for (const auto& i : vec) {
		std::cout << i << " ";
	}
	std::cout << "]";
}

void test1 () {
	std::cout << "\n=======Iterator for Vector's=======" << std::endl;
	std::vector<int> nums1{ 1,2,3,4,5 };
	
	auto it = nums1.begin();	    //point to 1 (the iterator is an object in itself it's not a pointer)
	
	std::cout << *it << std::endl; 
	it++;							//point to 2 (increment by one)
	std::cout << *it << std::endl;
	it += 2;						//point to 4 (increments by two places already pointing to 2)
	std::cout << *it << std::endl;
	it -= 2;						//point to 2 (decrements by two places back to 2)
	std::cout << *it << std::endl;
	
	it = nums1.end() - 1;		//poin to 5 (reset the iterator to point to the last number which is the vector size minus one for the null terminator
	std::cout << *it << std::endl;
}

void test2() {
	std::cout << "\=====Iterator's for Vector's 2======" << std::endl;
	std::vector<int> nums1{ 1,2,3,4,5 };
	std::vector<int>::iterator it = nums1.begin();  //iterator is pointing to the 1 in the nums1 vector
	while (it != nums1.end()) {						//while the iterator is not pointing to the null terminator at the end of the vector          
		std::cout << *it << std::endl;				//cout what it is poiniting to be deferencing *
		++it;										//then increment the iterator by one
	}
	it = nums1.begin(); //resetting the iterator to point to 1
	while (it != nums1.end()) {	//change all elements in the vector to 0
		*it = 0;
		it++;
	} 
	display(nums1);
}

void test3() {  //making the iterator constant in order to show potential compiler error if program was to try and change a variable
	//using a const iterator
	std::cout << "\==========Const Iterator's==========" << std::endl;
	std::vector<int> nums1{ 1,2,3,4,5 };
	std::vector<int>::const_iterator it1 = nums1.begin(); //the iterator cannot change what it is poitning too

	while (it1 != nums1.end()) {
		std::cout << *it1 << std::endl;
		it1++;
	}

	//compiler error would occur when trying to change an element
	it1 = nums1.begin();
	while (it1 != nums1.end()) {
		//*it1 = 0; // Compiler error - READ ONLY
		it1++;
	}
}

void test4() {
	std::cout << "\==Reverse Iterator & Map Iterator===" << std::endl;
	//using a reverse iterator
	std::vector<int> vec{ 1,2,3,4,5 };
	auto it1 = vec.rbegin(); //reverse iterator using 'r' .rbegin(); satrts at 5 and works backwards with increment
	while (it1 != vec.rend()) { //.rend()
		std::cout << *it1 << std::endl;
		++it1;
	}
}

int main()
{
	test1();
	test2();
	test3();
	test4(); 
	return 0;
}
